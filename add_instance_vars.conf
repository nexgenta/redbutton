<RootClass>
typedef struct
{
	/* runtime type info */
	unsigned int rtti;
	/* we keep a fully resolved reference (ie always includes the group identifier) */
	ExternalReference ref;
	/* true if we are waiting for external content to be available */
	bool need_content;
	/* variables defined in ISO MHEG spec */
	bool AvailabilityStatus;
	bool RunningStatus;
} RootClassInstanceVars;
</RootClass>

<ApplicationClass>
#include "MHEGTimer.h"

/* so we can do LIST_OF(RootClass *) */
typedef RootClass *RootClassPtr;
DEFINE_LIST_OF(RootClassPtr);

/*
 * UK MHEG Profile moves Timers out of the SceneClass into the GroupClass
 * so now both ApplicationClass and SceneClass get Timers
 */
typedef struct
{
	int id;
	int position;
	bool absolute_time;
	/* we add this */
	MHEGTimer mheg_id;
} Timer;

DEFINE_LIST_OF(Timer);

typedef struct
{
	/* inherited from GroupClass */
	unsigned int GroupCachePriority;
	LIST_OF(Timer) *Timers;
	/* we add these */
	LIST_OF(MHEGTimer) *removed_timers;
	struct timeval start_time;
	/* ApplicationClass */
	unsigned int LockCount;
	LIST_OF(RootClassPtr) *DisplayStack;	/* tail is on top */
	/* we add where to start searching for unused object numbers for clones */
	unsigned int next_clone;
} ApplicationClassInstanceVars;
</ApplicationClass>

<SceneClass>
typedef struct
{
	/* inherited from GroupClass */
	unsigned int GroupCachePriority;
	LIST_OF(Timer) *Timers;
	/* we add these */
	LIST_OF(MHEGTimer) *removed_timers;
	struct timeval start_time;
	/* we add where to start searching for unused object numbers for clones */
	unsigned int next_clone;
} SceneClassInstanceVars;
</SceneClass>

<VariableClass>
typedef struct
{
	OriginalValue Value;
} VariableClassInstanceVars;
</VariableClass>

<TokenGroupClass>
typedef struct
{
	/* inherited from TokenManagerClass */
	unsigned int TokenPosition;
} TokenGroupClassInstanceVars;
</TokenGroupClass>

<ListGroupClass>
typedef struct
{
	TokenGroupItem item;
	bool ItemSelectionStatus;
} ListGroupItem;

DEFINE_LIST_OF(ListGroupItem);

typedef struct
{
	/* inherited from TokenManagerClass */
	unsigned int TokenPosition;
	/* ListGroupClass */
	LIST_OF(ListGroupItem) *ItemList;
	int FirstItem;
	/* UK MHEG Profile adds this extra variable */
	LIST_OF(XYPosition) *Positions;
} ListGroupClassInstanceVars;
</ListGroupClass>

<BitmapClass>
#include "MHEGBitmap.h"

typedef struct
{
	/* inherited from VisibleClass */
	OriginalBoxSize BoxSize;
	XYPosition Position;
	bool have_PaletteRef;		/* OPTIONAL */
	ObjectReference PaletteRef;
	/* BitmapClass */
	unsigned int Transparency;
	/* UK MHEG Profile adds this extra variable */
	XYPosition BitmapDecodeOffset;
	/* we add the actual bitmap data */
	OctetString BitmapData;
	/* MHEGDisplay's internal format */
	MHEGBitmap *Bitmap;
} BitmapClassInstanceVars;
</BitmapClass>

<LineArtClass>
#include "MHEGColour.h"
#include "MHEGCanvas.h"

typedef struct
{
	/* inherited from VisibleClass */
	OriginalBoxSize BoxSize;
	XYPosition Position;
	bool have_PaletteRef;		/* OPTIONAL */
	ObjectReference PaletteRef;
	/* LineArtClass */
	int LineWidth;
	int LineStyle;
#define LineStyle_solid		original_line_style_solid
#define LineStyle_dashed	original_line_style_dashed
#define LineStyle_dotted	original_line_style_dotted
	MHEGColour RefLineColour;
	MHEGColour RefFillColour;
	/*
	 * OriginalRefLine/FillColour are optional but have defaults defined in the spec
	 * store them here so we don't have to keep checking if they were specified or not
	 */
	MHEGColour OriginalRefLineColour;
	MHEGColour OriginalRefFillColour;
	/* only used by DynamicLineArtClass */
	MHEGCanvas *canvas;
} LineArtClassInstanceVars;
</LineArtClass>

<TextClass>
#include "MHEGFont.h"

typedef struct
{
	/* inherited from VisibleClass */
	OriginalBoxSize BoxSize;
	XYPosition Position;
	bool have_PaletteRef;		/* OPTIONAL */
	ObjectReference PaletteRef;
	/* TextClass */
	OctetString TextData;
	MHEGFont Font;
	/* UK MHEG Profile adds these */
	MHEGColour TextColour;
	MHEGColour BackgroundColour;
// part of MHEGFont
//	MHEGFontAttr FontAttributes;
	/* we add this */
	LIST_OF(MHEGTextElement) *element;
} TextClassInstanceVars;
</TextClass>

<VideoClass>
#include <pthread.h>

typedef struct
{
	/* inherited from VisibleClass */
	OriginalBoxSize BoxSize;
	XYPosition Position;
	bool have_PaletteRef;		/* OPTIONAL */
	ObjectReference PaletteRef;
	/* VideoClass */
	/* UK MHEG Profile adds this */
	XYPosition VideoDecodeOffset;
	/* we add a link to the StreamClass it is a part of */
	struct StreamClass *owner;
	/* we add a lock for the size/position */
	pthread_mutex_t bbox_lock;
	/* and the scaled size */
	pthread_mutex_t scaled_lock;
	bool scaled;
	unsigned int scaled_width;
	unsigned int scaled_height;
	/* this gets set if the MHEGStreamPlayer fails to open the video stream */
	bool no_video;
} VideoClassInstanceVars;
</VideoClass>

<StreamClass>
#include "MHEGStreamPlayer.h"

typedef struct
{
	int numerator;
	bool have_denominator;	/* OPTIONAL */
	int demoninator;
} StreamSpeed;

typedef struct
{
	int id;
	int position;
} CounterTrigger;

DEFINE_LIST_OF(CounterTrigger);

typedef struct
{
	StreamSpeed Speed;
	int CounterPosition;
	int CounterEndPosition;
	LIST_OF(CounterTrigger) *CounterTriggers;
	/* we add this */
	MHEGStreamPlayer player;
} StreamClassInstanceVars;
</StreamClass>

<AudioClass>
typedef struct
{
	int Volume;
	/* we add a link to the StreamClass it is a part of */
	struct StreamClass *owner;
} AudioClassInstanceVars;
</AudioClass>

<RTGraphicsClass>
typedef struct
{
	/* not implemented */
	/* we add a link to the StreamClass it is a part of */
	struct StreamClass *owner;
} RTGraphicsClassInstanceVars;
</RTGraphicsClass>

<SliderClass>
typedef struct
{
	/* inherited from VisibleClass */
	OriginalBoxSize BoxSize;
	XYPosition Position;
	bool have_PaletteRef;		/* OPTIONAL */
	ObjectReference PaletteRef;
	/* inherited from InteractibleClass */
	bool HighlightStatus;
	bool InteractionStatus;
	/* SliderClass */
	int SliderValue;
	int Portion;
	/* UK MHEG Profile adds these */
	int MinValue;
	int MaxValue;
	int StepSize;
} SliderClassInstanceVars;
</SliderClass>

<EntryFieldClass>
typedef struct
{
	/* inherited from VisibleClass */
	OriginalBoxSize BoxSize;
	XYPosition Position;
	bool have_PaletteRef;		/* OPTIONAL */
	ObjectReference PaletteRef;
	/* inherited from InteractibleClass */
	bool HighlightStatus;
	bool InteractionStatus;
	/* inherited from TextClass */
	OctetString TextData;
	MHEGFont Font;
	/* UK MHEG Profile adds these */
	MHEGColour TextColour;
	MHEGColour BackgroundColour;
// part of MHEGFont
//	MHEGFontAttr FontAttributes;
	/* we add this */
	LIST_OF(MHEGTextElement) *element;
	/* EntryFieldClass */
	unsigned int EntryPoint;
	bool OverwriteMode;
} EntryFieldClassInstanceVars;
</EntryFieldClass>

<HyperTextClass>
typedef struct
{
	/* inherited from VisibleClass */
	OriginalBoxSize BoxSize;
	XYPosition Position;
	bool have_PaletteRef;		/* OPTIONAL */
	ObjectReference PaletteRef;
	/* inherited from InteractibleClass */
	bool HighlightStatus;
	bool InteractionStatus;
	/* inherited from TextClass */
	OctetString TextData;
	MHEGFont Font;
	/* UK MHEG Profile adds these */
	MHEGColour TextColour;
	MHEGColour BackgroundColour;
// part of MHEGFont
//	MHEGFontAttr FontAttributes;
	/* we add this */
	LIST_OF(MHEGTextElement) *element;
	/* HyperTextClass */
	OctetString LastAnchorFired;
	/* UK MHEG Profile adds this */
	unsigned int FocusPosition;
} HyperTextClassInstanceVars;
</HyperTextClass>

<ProgramClass>
typedef struct
{
	/* we need to know if it was forked or not */
	bool forked;
} ProgramClassInstanceVars;
</ProgramClass>

