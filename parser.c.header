#include <stdio.h>

#include "parser.h"
#include "tokens.h"

int yylineno = 1;

void
yyerror(const char *str)
{
	fprintf(stderr, "Error: %s at line %d\n", str, yylineno);
}

int
yywrap(void)
{
	return 1;
}

/*
 * parser functions for the predefined types
 */

void parse_INTEGER(struct node *parent)
{
	if(next_token() != INTEGER)
		parse_error("Unexpected token '%s'; expecting an integer", token_text());

	verbose("<INTEGER value=%s/>\n", token_text());

	return;
}

void parse_BOOLEAN(struct node *parent)
{
	if(next_token() != BOOLEAN)
		parse_error("Unexpected token '%s'; expecting 'true' or 'false'", token_text());

	verbose("<BOOLEAN value=%s/>\n", token_text());

	return;
}


void parse_STRING(struct node *parent)
{
	if(next_token() != STRING)
		parse_error("Unexpected token '%s'; expecting \"STRING\"", token_text());

	verbose("<STRING value=%s/>\n", token_text());

	return;
}


void parse_QPRINTABLE(struct node *parent)
{
	if(next_token() != QPRINTABLE)
		parse_error("Unexpected token '%s'; expecting 'QPRINTABLE'", token_text());

	verbose("<QPRINTABLE value=%s/>\n", token_text());

	return;
}


void parse_BASE64(struct node *parent)
{
	if(next_token() != BASE64)
		parse_error("Unexpected token '%s'; expecting `BASE64`", token_text());

	verbose("<BASE64 value=%s/>\n", token_text());

	return;
}


void parse_Null(struct node *parent)
{
	if(next_token() != Null)
		parse_error("Unexpected token '%s'; expecting 'Null'", token_text());

	verbose("<Null/>\n");

	return;
}

/*
 * auto-generated parser functions follow
 */

